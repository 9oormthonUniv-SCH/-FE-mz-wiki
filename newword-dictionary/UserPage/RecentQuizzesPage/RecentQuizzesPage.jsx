import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import styled from "styled-components";

import EmptyState from "./conponents/EmptyState";
import QuizCard from "./conponents/QuizCard";
import QuizStats from "./conponents/QuizStats";
import SortControls from "./conponents/SortControls";
import UserPageHeader from "../components/UserPageHeader";
import LoadingSpinner from "../components/LoadingSpinner";
import ErrorMessage from "../components/ErrorMessage";

const RecentQuizzesPage = () => {
  const [recentQuizzes, setRecentQuizzes] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [sortBy, setSortBy] = useState("latest"); // Ï†ïÎ†¨ ÏòµÏÖò : latest, oldest

  const navigate = useNavigate();

  useEffect(() => {
    const loadRecentQuizzes = async () => {
      try {
        setLoading(true);
        setError("");

        const token = localStorage.getItem("token");

        console.log("ÏµúÍ∑º Ìëº Î¨∏Ï†ú Î°úÎìú");

        const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;
        const response = await fetch(`${API_BASE_URL}/quiz/history`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          if (response.status === 401) {
            alert("ÏÑ∏ÏÖòÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.");
            localStorage.clear();
            window.location.href = "/login";
            return;
          } else if (response.status === 403) {
            throw new Error("Ï†ëÍ∑º Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.");
          } else if (response.status === 404){
            throw new Error("ÏµúÌÅ∞ ÌÄ¥Ï¶à Î™©Î°ùÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
          }else {
            throw new Error(`ÏÑúÎ≤Ñ Ïò§Î•ò: ${response.status}`);
          }
        }

        const data = await response.json();
        const quizzesArray = Array.isArray(data) ? data : data.quizzes || data.data || [];
        setRecentQuizzes(quizzesArray);
      } catch (err) {
        console.log("ÏµúÍ∑º Ìëº Î¨∏Ï†ú Î™©Î°ù Î°úÎìú Ïã§Ìå®", err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    loadRecentQuizzes();
  }, []);

  //Ï†ïÎ†¨Îêú Î™©Î°ù Î∞òÌôò
  const getSortedQuizzes = () => {
    let sorted = [...recentQuizzes];
    switch (sortBy) {
      case "latest":
        sorted.sort((a, b) => new Date(b.date) - new Date(a.date));
        break;
      case "oldest":
        sorted.sort((a, b) => new Date(a.date) - new Date(b.date));
        break;
      default:
        break;
    }
    return sorted;
  };
  // Ï†ïÎãµÎ•† Í≥ÑÏÇ∞
  const calculateStats = () => {
    const totalQuizzes = recentQuizzes.length;
    const correctCount = recentQuizzes.filter((quiz) => quiz.isCorrect).length;
    const accuracy = totalQuizzes > 0 ? Math.round((correctCount / totalQuizzes) * 100) : 0;

    return { totalQuizzes, correctCount, accuracy };
  };

  const sortedQuizzes = getSortedQuizzes();
  const stats = calculateStats();

  if (loading) return <LoadingSpinner message='ÏµúÍ∑º ÌÄ¥Ï¶à Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë' icon='üìù' />;

  if (error) return <ErrorMessage error={error} onRetry={() => window.location.reload()} />;

  return (
    <Container>
    {/* Ìó§Îçî */}
      <UserPageHeader 
      title="üìù ÏµúÍ∑º Ìëº Î¨∏Ï†ú" 
      onBack={() => navigate(-1)}
       />
       {/* ÌÜµÍ≥Ñ */}
      <QuizStats stats={stats} />

      {/* Ï†ïÎ†¨ Ïª®Ìä∏Î°§ */}
      <SortControls 
        sortBy={sortBy} 
        onSortChange={setSortBy} 
        hasData={recentQuizzes.length > 0}
       />

       {/* Î©îÏù∏ Ïª®ÌÖêÏ∏† */}
      <ContentSection>
        {recentQuizzes.length === 0 ? (
          <EmptyState onGoHome={() => navigate("/")} />
        ) : (
          <QuizList>
            {sortedQuizzes.map((quiz) => (
              <QuizCard key={quiz.id} quiz={quiz} />
            ))}
          </QuizList>
        )}
      </ContentSection>

      {/* Í≤∞Í≥º ÏöîÏïΩ */}
      {recentQuizzes.length > 0 && (
        <ResultSummary>
          Ï¥ù {stats.totalQuizzes}Í∞ú Î¨∏Ï†ú Ï§ë {stats.correctCount}Í∞ú Ï†ïÎãµ (Ï†ïÎãµÎ•†: {stats.accuracy}%)
        </ResultSummary>
      )}
    </Container>
  );
};

const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  color: #333;
`;

const ContentSection = styled.div`
  min-height: 400px;
`;

const QuizList = styled.div`
  display: flex;
  flex-direction: column;
  gap: 25px;
  margin-bottom: 30px;
`;

const ResultSummary = styled.div`
  text-align: center;
  padding: 25px;
  background: #e9ecef;
  border-radius: 15px;
  color: #495057;
  font-weight: bold;
  font-size: 16px;
`;

export default RecentQuizzesPage;